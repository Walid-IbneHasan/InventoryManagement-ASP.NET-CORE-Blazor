@page "administration/account/users/manage"
@rendermode InteractiveServer
@inject IAccountService accountService
@inject GenericHomeHeaderState homeGenericState
@inject AdminActiveOrderCountState adminActiveOrderCountState
@layout MainLayout
@attribute [Authorize(Policy = "AdministrationPolicy")]
<PageTitle>Manage Users </PageTitle>

<TwoSectionsTemplate>
    <Col12Template>
        <AdminHomeHeader/>
        <NetcodeHubBreadCrumb BreadCrumbs="BreadCrumbs"BackgroundColor="@BreadCrumbBackgroundColor.SecondarySubtle()"/>
        <div class="row mt-3">
            @if(Users!=null)
            {
                @foreach(var user in Users)
                {
                    var userTemp = user;
                    <div class="col-auto mb-3">
                        <div class="card border-success shadow-lg">
                            <div class="card-body">
                                <MudTreeView T="string" Dense=true Hover=true Class="text-primary" >
                                    <MudTreeViewItem Icon="@Icons.Material.Filled.SupervisedUserCircle" Value="@user.Name" class="text-primary" >
                                    <MudTreeViewItem Icon="@Icons.Material.Filled.VerifiedUser" Value=@($"Role:{user.RoleName}") class="text-success"/>
                                    <MudTreeViewItem Icon="@Icons.Material.Filled.Email" Value=@($"Role:{user.Email}") class="text-dark"/>
                                    <MudTreeViewItem Icon="@Icons.Material.Filled.Create" Value=@($"Role:{user.Create}") class="text-warning"/>
                                    <MudTreeViewItem Icon="@Icons.Material.Filled.Edit" Value=@($"Role:{user.Update}") class="text-text-info"/>
                                    <MudTreeViewItem Icon="@Icons.Material.Filled.Delete" Value=@($"Role:{user.Delete}") class="text-damger"/>
                                    <MudTreeViewItem Icon="@Icons.Material.Filled.List" Value=@($"Role:{user.Read}") class="text-success-emphasis"/>
                                    <MudTreeViewItem Icon="@Icons.Material.Filled.SettingsInputComponent" Value=@($"User Management:{user.ManageUser}") class="text-success"/>
                                        <MudDivider />
                                        <button class="btn text-info nav-link float-end btn-sm" @onclick="()=>ManageUserClicked(user)">
                                            <i class="mdi mdi-pencil"></i>
                                        </button>


                                </MudTreeViewItem>
                                </MudTreeView>

                            </div>
                            <div class="card-footer">

                            </div>
                            
                        </div>

                    </div>


                }
            }
            <Modal @bind-Open="IsOpen" BootstrapClass="border-info rounded p-2 ml-2 mr-2 align-items-center position-absolute top-50 start-50 translate-middle" CustomStyle="width:300px">
                <ContentContent>
                    <div class="card p-3 shadow-lg border-success">
                        <div class="card-title text-center text-info d-flex justify-content-between">
                            <i class="d-flex mdi mdi-pencil text-primary fs-3"></i>
                            <span > Manage Permissions </span>
                            <i class="mdi mdi-close text-danger fw-bold menu-icon fs-3 d-flex" style="cursor:pointer"@onclick="CloseModalDialog" ></i>

                        </div>
                        <div class="card-body">
                            <h5 > @ChangeUserClaimRequestDTO.Name</h5>
                            <EditForm Model="ChangeUserClaim" OnValidSubmit="SaveChanges">
                                <DataAnnotationsValidator />
                                <div class="form-group mt-3">
                                    <label class="form-label">Create</label>
                                    <InputSelect @bind-Value="ChangeUserClaims.Create" class="form-select>
                                                @if(ChangeUserClaims.Create)
                                                   {
                                                    <option selected value="true">True</option>
                                                    <option value="false">False</option>
                                                    }
                                                    else{
                                        <option value="true">True</option>
                                        <option selected value="false">False</option>
                                                    }
                                    </InputSelect>


                                </div>
                                <div class="form-group mt-3">
                                    <label class="form-label">Update</label>
                                    <InputSelect @bind-Value="ChangeUserClaims.Update" class="form-select>
                                                @if(ChangeUserClaims.Create)
                                                   {
                                                    <option selected value="true">True</option>
                                                    <option value="false">False</option>
                                                    }
                                                    else{
                                        <option value="true">True</option>
                                        <option selected value="false">False</option>
                                                    }
                                    </InputSelect>


                                </div>
                                <div class="form-group mt-3">
                                    <label class="form-label">Delete</label>
                                    <InputSelect @bind-Value="ChangeUserClaims.Delete" class="form-select mb-3>
                                                @if(ChangeUserClaims.Delete)
                                                   {
                                                    <option selected value="true">True</option>
                                                    <option value="false">False</option>
                                                    }
                                                    else{
                                        <option value="true">True</option>
                                        <option selected value="false">False</option>
                                                    }
                                    </InputSelect>


                                </div>
                                <div class="form-group mt-3">
                                    <label class="form-label">Read</label>
                                    <InputSelect @bind-Value="ChangeUserClaims.Delete" class="form-select mb-3>
                                                @if(ChangeUserClaims.Read)
                                                   {
                                                    <option selected value="true">True</option>
                                                    <option value="false">False</option>
                                                    }
                                                    else{
                                        <option value="false">False</option>
                                        <option selected value="true">True</option>
                                                    }
                                    </InputSelect>


                                </div>
                                <div class="form-group mt-3">
                                    <label class="form-label">Role</label>
                                    @if(Roles!=null && !string.IsNullOrEmpty(ChangeUserClaim.RoleName)){
                                        <InputSelect @bind-Value="ChangeUserClaims.RoleName" class="form-select mb-3>
                                        @{
                                        string roleName="";
                                        @if(ChangeUserClaim.RoleName.Equals(Policy.RoleClaim.Admin))
                                        {
                                            roleName=Policy.RoleClaim.Admin;
                                            <option selected value="Admin">@Policy.RoleClaim.Admin</option>
                                        }
                                        @else if(ChangeUserClaim.RoleName,Equals(Policy.RoleClaim.Manager))
                                        {
                                            roleName=Policy.RoleClaim.Manager;
                                            <option selected value="Manager" @Policy.RoleClaim.Manager>Manager</option>
                                        }
                                        else{
                                            roleName=Policy.RoleClaim.User;
                                            <option selected value="User" @Policy.RoleClaim.User>User</option>
                                        }
                                        @foreach(var role in Roles)
                                        {
                                            if(!role.Equals(roleName))
                                            {
                                                <option value="@role">@role</option>>
                                            }
                                        }
                                        
}
                                    </InputSelect>
                                    }
                                    


                                </div>


                                <div class="form-group mt-3">
                                    <label class="form-label">Manage User</label>
                                         
                                        <InputSelect @bind-Value="ChangeUserClaims.ManageUser" class="form-select mb-3>
                                        @{
                                        string roleName="";
                                        @if(ChangeUserClaim.ManageUser.Equals(Policy.RoleClaim.Admin))
                                        {
                                            
                                            <option selected value="true">True</option>
                                            <option  value="false">False</option>
                                        }
                                      
                                        else{
                                            
                                            <option selected value="false">False</option>
                                            <option  value="true">True</option>
                                        }
                                        
                                        
}
                                    </InputSelect>
                                    }
                                    


                                </div>
                                <div class="form-group mt-3">
                                    @if(Loading)
                                    {
                                        <GenericSpinnerButton ButtonClass="btn btn-info btn-sm float-end" Text="Saving..."/>
                                    }
                                    else{
                                        <button class="btn btn-info float-end btn-sm">Save</button>
                                    }
                                </div>
                                <ValidationSummary/>

                            </EditForm>
                        </div>

                    </div>
                </ContentContent>
            </Modal>
            <NetcodeHubToast Duration="2000" IconClass="mdi mdi-content-duplicate menu-icon fs-4" @ref="ToastComponent" />

        </div>
    </Col12Template>
</TwoSectionsTemplate>

@code {
    private Dictionary<string, string> BreadCrumbs = new Dictionary<string, string>
    {
        { "Home", "app/home" },
        { "Manage Users", null},

    };
    public bool IsOpen { get; set; }
    void OpenModal() => IsOpen = true;
    ChangeUserClaimRequestDTO ChangeUserClaims = new();
    NetcodeHubToast? ToastComponent;
    private HubConnection? hubConnection;
    [CascadingParameter] public Task<AuthenticationState>? UserAuthState { get; set; }
    private List<string> Roles = new()
    {
    Policy.RoleClaim.Admin,
    Policy.RoleClaim.User,
    Policy.RoleClaim.Manager,
    };

    private IEnumerable<GetUserWithClaimResponseDTO> Users = Enumerable.Empty<GetUserWithClaimResponseDTO>();

    private GetUserWithClaimsResponseDTO UserWithClaimsResponseDTO = new();
    private bool Loading = false;
    protected async override Task OnInitializedAsync()
    {
    if(!CustomAuthorizationService.CustomClaimChecker((await UserAuthState!).User,DefaultClaims.ManageUser))
        NavManager.NavigateTo("Account/Access-Denied");

    homeGenericState.StateChanged += StateButtonClicked;
    await GetUsersWithClaims();
    hubConnection = NetcodeHubConnectionService.GetHubConnection();
    hubConnection.On<string>("Notify", async (clientId) =>
    {
        await CallWhenNotified();
    });
    if(hubConnection==null)
    {
        await hubConnection!.StartAsync();
    }
    }
    async Task CallWhenNotified()
    {
    await InvokeAsync(async () =>
    {
        StateHasChanged();
        await AdminActiveOrderCountState.GetActiveOrdersCount();
    });
    }

    void ManagerUserClicked(GetUserWithClaimResponseDTO user)
    {
    user.Adapt(ChangeUserClaim);
    OpenModal();
    }

    void CloseModalDialog()
    {
    ChangeUserClaim = new();
    IsOpen = false;
    }
    async Task SaveChanges()
    {
    Loading = true;
    await Task.Delay(3000);
    var result = await accountService.UpdateUserAsync(ChangeUserClaim);
    await acountService.SaveActivityAsync(new ActivityTrackerRequestDTO()
        {
            UserId = (await UserAuthState!).User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value,
            Title = "Get All Users with claims method called",
            Description = result.Description,
            Date = DateTime.Now.Date,
            OperationState = result.Flag
        });
    if (result.Flag)
    {
        await ToastComponent!.ShowSuccessToast("Success", result.Message);
        await GetUsersWithClaims();
    }
    else{
        await ToastComponenet!.ShowErrorToast("Error", result.Message);
    }
    Loading = false;
    }

    void StateButtonClicked()
    {
    string adminOrderUrl = "app/administration/products/orders";
    if(homeGenericState.IsAdmin)
    {
        NavManager.NavigateTo($"{adminOrderUrl}/{homeGenericState.StateName}");
    }

    }

    private async Task GetUsersWithClaims()
    {
    try{
        Users = await accountService.GetUsersWithClaimsAsync();
    }
    catch{

    }
    }
    public void Dispose() => homeGenericState.StateChanged -= StateButtonClicked;

}
