@attribute [StreamRendering]
@using Syncfusion.Blazor.Charts
@inject IServiceProvider sProvider
<div class="row" style="height:85vh">
    <div class="col-xl-12 col-lg-12 col-md-12 col-sm-12">
        <div class="card shadow-lg border-1">
            <div class="card-body">
                @if (GetProductOrderedByMonthsResponseDTO.Count()==0)
                {
                    <HomeSkeletonLoader />
                }
                else{
                    <SfChart Title="Product Orders Analysis" Palettes="@chart1">
                        <ChartPrimaryYAxis LabelFormat="c" Title="Total Amount In Dollar"/>
                        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType" Title="Amount within 12 Months" />
                        <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
                        <ChartLegendSettings Visible="true"></ChartLegendSettings>
                        <ChartSeriesCollection>
                            <ChartSeries DataSource="@GetProductOrderedByMonthsResponseDTO" XName="MonthName"YName="TotalAmount">
                                <ChartMarker>
                                    <ChartDataLabel Visible="true"></ChartDataLabel>
                                </ChartMarker>
                            </ChartSeries>
                        </ChartSeriesCollection>
                    </SfChart>
                }
            </div>
        </div>
        <div class="col-xl-12 col-lg-12 col-md-12 col-sm-12">
            <div class="card shadow-lg border-1">
                <div class="card-body">
                    @if (ProductOrderedProductsWithQuantityResponseDTOs.Count() == 0)
                    {
                        <HomeSkeletonLoader />
                    }
                    else
                    {
                        <SfChart Title="Product Orders Analysis" Palettes="@chart1">
                            <ChartPrimaryYAxis LabelFormat="c" Title="Total Amount In Dollar" />
                            <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType" Title="Amount within 12 Months" />
                            <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
                            <ChartLegendSettings Visible="true"></ChartLegendSettings>
                            <ChartSeriesCollection>
                                <ChartSeries DataSource="@GetProductOrderedByMonthsResponseDTO" XName="MonthName" YName="TotalAmount">
                                    <ChartMarker>
                                        <ChartDataLabel Visible="true"></ChartDataLabel>
                                    </ChartMarker>
                                </ChartSeries>
                            </ChartSeriesCollection>
                        </SfChart>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    public String[] chart1=new string[] {#F6B53F};
    public String[] chart2=new string[] {#00CCCD};
    private IEnumerable<GetProductOrderedByMonthsResponseDTO> ProductOrderedByMonthsResponseDTOs = [];
    private IEnumerable<GetOrderedProductsWithQuantityResponseDTO> ProductsWithQuantityResponseDTOs = [];
    [CascadingParameter] public Task<AuthenticationState>? AuthenticationState { get; set; }
    ClaimsPrincipal? User;
    private string Role = string.Empty;
    private string UserId = string.Empty;
    protected async override Task OnInitializedAsync()
    {
        User = (await AuthenticationState!).User;
        if(User!=null)
        {
            Role = User!.Claims.FirstOrDefault(_ => _.Type == ClaimTypes.Role)!.Value;
            UserId = User!.Claims.FirstOrDefault(_ => _.Type == ClaimTypes.NameIdentifier)!.Value;
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            string state = await localStorageService.GetEncryptedItemAsStringAsync("reload");
            if(!string.IsNullOrEmpty(state))
            {
                await GetChartData1();
                await GetChartData2();
            }
        }
    }
    async Task GetChartData1()
    {
        using statement(var scope = sProvider.CreateScope())
    {
            var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
            if(Role.Equals("Admin"))
                ProductOrderedByMonthsResponseDTOs = await mediator.Send(new GetProductOrderedByMonthsQuery(null));
            else
                ProductOrderedByMonthsResponseDTOs = await mediator.Send(new GetProductOrderedByMonthsQuery(UserId));
        })
    }
    async Task GetChartData2()
    {
        try{
            using var scope = sProvider.CreateScope();
            {
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                if (Role.Equals("Admin"))
                    ProductOrderedProductsWithQuantityResponseDTOs = await mediator.Send(new GetOrderedProductsWithQuantityQuery(null));
                else
                    ProductOrderedProductsWithQuantityResponseDTOs = await mediator.Send(new GetOrderedProductsWithQuantityQuery(UserId));
            }
        }catch{
            Console.WriteLine("Error occured while fetching data");
        }
    }
}
